/* ==================================================================
 * JdbcSystemUserDao.java - 20/02/2020 10:27:55 am
 * 
 * Copyright 2020 SolarNetwork.net Dev Team
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation; either version 2 of 
 * the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
 * 02111-1307 USA
 * ==================================================================
 */

package net.solarnetwork.node.ocpp.dao.jdbc;

import static net.solarnetwork.node.ocpp.dao.jdbc.Constants.TABLE_NAME_TEMPALTE;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.BatchPreparedStatementSetter;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowMapper;
import net.solarnetwork.domain.SortDescriptor;
import net.solarnetwork.node.dao.jdbc.BaseJdbcGenericDao;
import net.solarnetwork.ocpp.dao.SystemUserDao;
import net.solarnetwork.ocpp.domain.SystemUser;

/**
 * JDBC implementation of {@link SystemUserDao}.
 * 
 * @author matt
 * @version 2.0
 */
public class JdbcSystemUserDao extends BaseJdbcGenericDao<SystemUser, Long> implements SystemUserDao {

	/**
	 * Enumeration of SQL resources.
	 */
	public enum SqlResource {

		/** Find by username. */
		GetByUsername("get-username"),

		/** Find by username and charge point. */
		GetByUsernameAndChargePoint("get-username-and-cp"),

		/** Insert an allowed charge point. */
		InsertAllowedChargePoint("insert-cp"),

		/** Update an allowed charge point. */
		UpdateAllowedChargePoint("update-cp"),

		/** Delete allowed charge points with an index over a given value. */
		DeleteAllowedChargePointsOver("delete-cp-over");

		private final String resource;

		private SqlResource(String resource) {
			this.resource = resource;
		}

		/**
		 * Get the SQL resource name.
		 * 
		 * @return the resource
		 */
		public String getResource() {
			return resource;
		}
	}

	/** The table name for {@link SystemUser} entities. */
	public static final String TABLE_NAME = "system_user";

	/** The charge point table version. */
	public static final int VERSION = 1;

	private final ResultSetExtractor<List<SystemUser>> SYSTEM_USER_EXTRACTOR = new SystemUserResultSetExtractor();

	/**
	 * Constructor.
	 */
	public JdbcSystemUserDao() {
		super(SystemUser.class, Long.class, new SystemUserRowMapper(), TABLE_NAME_TEMPALTE, TABLE_NAME,
				VERSION);
		setUseAutogeneratedKeys(true);
	}

	@Override
	public SystemUser getForUsername(String username) {
		return findFirst(getSqlResource(SqlResource.GetByUsername.getResource()), username);
	}

	@Override
	public SystemUser getForUsernameAndChargePoint(String username, String chargePointIdentifier) {
		return findFirst(getSqlResource(SqlResource.GetByUsernameAndChargePoint.getResource()), username,
				username, chargePointIdentifier, username);
	}

	@Override
	protected void setStoreStatementValues(SystemUser obj, PreparedStatement ps) throws SQLException {
		setInstantParameter(ps, 1, obj.getCreated() != null ? obj.getCreated() : Instant.now());
		setUpdateStatementValues(obj, ps, 1);
	}

	@Override
	protected void setUpdateStatementValues(SystemUser obj, PreparedStatement ps) throws SQLException {
		setUpdateStatementValues(obj, ps, 0);
		ps.setObject(3, obj.getId());
	}

	protected void setUpdateStatementValues(SystemUser obj, PreparedStatement ps, int offset)
			throws SQLException {
		ps.setString(1 + offset, obj.getUsername());
		ps.setString(2 + offset, obj.getPassword());
	}

	@Override
	protected SystemUser findFirst(String sql, Object... parameters) {
		List<SystemUser> results = getJdbcTemplate().query(sql, parameters, SYSTEM_USER_EXTRACTOR);
		return (results != null && !results.isEmpty() ? results.get(0) : null);
	}

	@Override
	public Collection<SystemUser> getAll(List<SortDescriptor> sorts) {
		return getJdbcTemplate().query(querySql(SQL_FIND_ALL, sorts), SYSTEM_USER_EXTRACTOR);
	}

	@Override
	protected Long storeDomainObject(SystemUser obj, String sqlInsert) {
		Long pk = super.storeDomainObject(obj, sqlInsert);
		insertAllowedChargePoints(pk, obj);
		return pk;
	}

	private void insertAllowedChargePoints(Long userId, SystemUser obj) {
		List<String> chargePointIds = (obj.getAllowedChargePoints() != null
				? new ArrayList<>(obj.getAllowedChargePoints())
				: null);
		if ( chargePointIds == null || chargePointIds.isEmpty() ) {
			return;
		}
		getJdbcTemplate().batchUpdate(getSqlResource(SqlResource.InsertAllowedChargePoint.getResource()),
				new BatchPreparedStatementSetter() {

					@Override
					public void setValues(PreparedStatement ps, int i) throws SQLException {
						String chargePointId = chargePointIds.get(i);
						ps.setLong(1, userId);
						ps.setInt(2, i);
						ps.setString(3, chargePointId);
					}

					@Override
					public int getBatchSize() {
						return chargePointIds.size();
					}
				});

	}

	@Override
	protected int updateDomainObject(SystemUser obj, String sqlUpdate) {
		int result = super.updateDomainObject(obj, sqlUpdate);
		if ( result > 0 ) {
			updateAllowedChargePoints(obj);
		}
		return result;
	}

	private void updateAllowedChargePoints(SystemUser obj) {
		List<String> chargePointIds = new ArrayList<>(
				obj.getAllowedChargePoints() != null ? obj.getAllowedChargePoints()
						: Collections.emptySet());
		for ( ListIterator<String> itr = chargePointIds.listIterator(); itr.hasNext(); ) {
			String chargePointId = itr.next();
			int count = getJdbcTemplate().update(
					getSqlResource(SqlResource.UpdateAllowedChargePoint.getResource()),
					new PreparedStatementSetter() {

						@Override
						public void setValues(PreparedStatement ps) throws SQLException {
							ps.setString(1, chargePointId);
							ps.setLong(2, obj.getId());
							ps.setInt(3, itr.previousIndex());
						}

					});
			if ( count < 1 ) {
				getJdbcTemplate().update(
						getSqlResource(SqlResource.InsertAllowedChargePoint.getResource()),
						new PreparedStatementSetter() {

							@Override
							public void setValues(PreparedStatement ps) throws SQLException {
								ps.setLong(1, obj.getId());
								ps.setInt(2, itr.previousIndex());
								ps.setString(3, chargePointId);
							}

						});
			}
		}
		getJdbcTemplate().update(getSqlResource(SqlResource.DeleteAllowedChargePointsOver.getResource()),
				obj.getId(), chargePointIds.size());
	}

	/**
	 * A row mapper for {@link SystemUser} entities.
	 */
	public static final class SystemUserRowMapper implements RowMapper<SystemUser> {

		@Override
		public SystemUser mapRow(ResultSet rs, int rowNum) throws SQLException {
			Long id = rs.getLong(1);
			Instant created = getInstantColumn(rs, 2);

			SystemUser obj = new SystemUser(id, created);
			obj.setUsername(rs.getString(3));
			obj.setPassword(rs.getString(4));

			return obj;
		}

	}

	/**
	 * A {@link RowMapper} for allowed charge points.
	 */
	public static final class AllowedChargePointRowMapper implements RowMapper<String> {

		private final int offset;

		public AllowedChargePointRowMapper(int offset) {
			super();
			this.offset = offset;
		}

		@Override
		public String mapRow(ResultSet rs, int rowNum) throws SQLException {
			rs.getLong(1 + offset);
			if ( rs.wasNull() ) {
				return null;
			}
			return rs.getString(2 + offset);
		}

	}

	/**
	 * A result set extractor for system users with associated allowed charge
	 * points.
	 */
	public static final class SystemUserResultSetExtractor
			implements ResultSetExtractor<List<SystemUser>> {

		private final RowMapper<SystemUser> mainRowMapper;
		private final RowMapper<String> allowedChargePointRowMapper;

		public SystemUserResultSetExtractor() {
			super();
			mainRowMapper = new SystemUserRowMapper();
			allowedChargePointRowMapper = new AllowedChargePointRowMapper(4);
		}

		@Override
		public List<SystemUser> extractData(ResultSet rs) throws SQLException, DataAccessException {
			List<SystemUser> result = new ArrayList<>(16);
			Map<Long, SystemUser> map = new HashMap<>(16);
			int rowNum = 0;
			while ( rs.next() ) {
				rowNum++;
				SystemUser rowMainEntity = mainRowMapper.mapRow(rs, rowNum);
				SystemUser entity = map.get(rowMainEntity.getId());
				if ( entity == null ) {
					// new main entity row
					map.put(rowMainEntity.getId(), rowMainEntity);
					entity = rowMainEntity;
					result.add(entity);
				}
				String relRowEntity = allowedChargePointRowMapper.mapRow(rs, rowNum);
				if ( relRowEntity != null ) {
					Set<String> set = entity.getAllowedChargePoints();
					if ( set == null ) {
						set = new LinkedHashSet<>(4);
						entity.setAllowedChargePoints(set);
					}
					set.add(relRowEntity);
				}
			}
			return result;
		}

	}

}
